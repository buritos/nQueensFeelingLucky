package queens

import org.scalatest.{FlatSpec, Matchers}

class SolverSpec extends FlatSpec with Matchers
{

  // All possible solutions for n = 8
  val all = Set(
    Seq(3, 1, 6, 2, 5, 7, 4, 0), Seq(4, 1, 3, 6, 2, 7, 5, 0), Seq(2, 4, 1, 7, 5, 3, 6, 0), Seq(2, 5, 3, 1, 7, 4, 6, 0), Seq(4, 6, 0, 2, 7, 5, 3, 1), Seq(3, 5, 7, 2, 0, 6, 4, 1),
    Seq(2, 5, 7, 0, 3, 6, 4, 1), Seq(4, 2, 7, 3, 6, 0, 5, 1), Seq(4, 6, 3, 0, 2, 7, 5, 1), Seq(3, 0, 4, 7, 5, 2, 6, 1), Seq(2, 5, 3, 0, 7, 4, 6, 1), Seq(3, 6, 4, 2, 0, 5, 7, 1),
    Seq(5, 3, 1, 7, 4, 6, 0, 2), Seq(5, 3, 6, 0, 7, 1, 4, 2), Seq(0, 6, 3, 5, 7, 1, 4, 2), Seq(5, 7, 1, 3, 0, 6, 4, 2), Seq(5, 1, 6, 0, 3, 7, 4, 2), Seq(3, 6, 0, 7, 4, 1, 5, 2),
    Seq(4, 7, 3, 0, 6, 1, 5, 2), Seq(3, 7, 0, 4, 6, 1, 5, 2), Seq(1, 6, 4, 7, 0, 3, 5, 2), Seq(0, 6, 4, 7, 1, 3, 5, 2), Seq(1, 4, 6, 3, 0, 7, 5, 2), Seq(3, 1, 6, 4, 0, 7, 5, 2),
    Seq(4, 6, 0, 3, 1, 7, 5, 2), Seq(5, 3, 0, 4, 7, 1, 6, 2), Seq(4, 0, 3, 5, 7, 1, 6, 2), Seq(4, 1, 5, 0, 6, 3, 7, 2), Seq(5, 2, 6, 1, 7, 4, 0, 3), Seq(1, 6, 2, 5, 7, 4, 0, 3),
    Seq(6, 2, 0, 5, 7, 4, 1, 3), Seq(4, 0, 7, 5, 2, 6, 1, 3), Seq(0, 4, 7, 5, 2, 6, 1, 3), Seq(2, 5, 7, 0, 4, 6, 1, 3), Seq(5, 2, 0, 6, 4, 7, 1, 3), Seq(6, 4, 2, 0, 5, 7, 1, 3),
    Seq(6, 2, 7, 1, 4, 0, 5, 3), Seq(4, 2, 0, 6, 1, 7, 5, 3), Seq(1, 4, 6, 0, 2, 7, 5, 3), Seq(2, 5, 1, 4, 7, 0, 6, 3), Seq(5, 0, 4, 1, 7, 2, 6, 3), Seq(7, 2, 0, 5, 1, 4, 6, 3),
    Seq(1, 7, 5, 0, 2, 4, 6, 3), Seq(4, 6, 1, 5, 2, 0, 7, 3), Seq(2, 5, 1, 6, 4, 0, 7, 3), Seq(5, 1, 6, 0, 2, 4, 7, 3), Seq(2, 6, 1, 7, 5, 3, 0, 4), Seq(5, 2, 6, 1, 3, 7, 0, 4),
    Seq(3, 1, 6, 2, 5, 7, 0, 4), Seq(6, 0, 2, 7, 5, 3, 1, 4), Seq(0, 5, 7, 2, 6, 3, 1, 4), Seq(2, 7, 3, 6, 0, 5, 1, 4), Seq(5, 2, 6, 3, 0, 7, 1, 4), Seq(6, 3, 1, 7, 5, 0, 2, 4),
    Seq(3, 5, 7, 1, 6, 0, 2, 4), Seq(1, 5, 0, 6, 3, 7, 2, 4), Seq(1, 3, 5, 7, 2, 0, 6, 4), Seq(2, 5, 7, 1, 3, 0, 6, 4), Seq(5, 2, 0, 7, 3, 1, 6, 4), Seq(7, 3, 0, 2, 5, 1, 6, 4),
    Seq(3, 7, 0, 2, 5, 1, 6, 4), Seq(1, 5, 7, 2, 0, 3, 6, 4), Seq(6, 1, 5, 2, 0, 3, 7, 4), Seq(2, 5, 1, 6, 0, 3, 7, 4), Seq(3, 6, 2, 7, 1, 4, 0, 5), Seq(3, 7, 4, 2, 0, 6, 1, 5),
    Seq(2, 4, 7, 3, 0, 6, 1, 5), Seq(3, 1, 7, 4, 6, 0, 2, 5), Seq(4, 6, 1, 3, 7, 0, 2, 5), Seq(6, 3, 1, 4, 7, 0, 2, 5), Seq(7, 1, 3, 0, 6, 4, 2, 5), Seq(6, 1, 3, 0, 7, 4, 2, 5),
    Seq(4, 0, 7, 3, 1, 6, 2, 5), Seq(3, 0, 4, 7, 1, 6, 2, 5), Seq(4, 1, 7, 0, 3, 6, 2, 5), Seq(2, 6, 1, 7, 4, 0, 3, 5), Seq(2, 0, 6, 4, 7, 1, 3, 5), Seq(7, 1, 4, 2, 0, 6, 3, 5),
    Seq(2, 4, 1, 7, 0, 6, 3, 5), Seq(2, 4, 6, 0, 3, 1, 7, 5), Seq(4, 1, 3, 5, 7, 2, 0, 6), Seq(5, 2, 4, 7, 0, 3, 1, 6), Seq(4, 7, 3, 0, 2, 5, 1, 6), Seq(3, 1, 4, 7, 5, 0, 2, 6),
    Seq(3, 5, 0, 4, 1, 7, 2, 6), Seq(5, 2, 0, 7, 4, 1, 3, 6), Seq(4, 2, 0, 5, 7, 1, 3, 6), Seq(3, 1, 7, 5, 0, 2, 4, 6), Seq(5, 2, 4, 6, 0, 3, 1, 7), Seq(5, 3, 6, 0, 2, 4, 1, 7),
    Seq(3, 6, 4, 1, 5, 0, 2, 7), Seq(4, 6, 1, 5, 2, 0, 3, 7)
  )


  "Solver" should "find valid solutions" in {
    val solutions = for(_ <- (0 until 10).par) yield {
      Solver.solve(8)
    }
    solutions.filter(_._1.isEmpty).foreach { solution =>
      all should contain (solution._3)
    }
  }

}
